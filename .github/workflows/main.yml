name: CI
on:
  push:
    branches: [ master ]
    paths-ignore:
      - assets/**
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Scan for secrets left
      uses: AlicanAkkus/pinder-action@1.0.0
    - name: Configure AWS Access
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
    - name: ECR login
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: API image build
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ijm-api
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f api/Dockerfile ./api;
    - name: Journal image build
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ijm-journal
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build --build-arg app_env=${{ secrets.env }} \
          --build-arg api_url=${{ secrets.api_url }}} \
          --build-arg api_url_public=${{ secrets.API_URL_PUBLIC }} \
          --build-arg api_key=${{ secrets.api_key }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f journal/Dockerfile ./journal;
    - name: Prepare env for Automation tests to run
      run: |
        rm -rf docker-compose.overrirde.yml
        APP_IP=$(hostname -I | awk '{print $1}')
        echo "IIIF_URI=http://$APP_IP:8081/iiif/2" > .env
        echo "API_URL_PUBLIC=http://$APP_IP" >> .env
        docker-compose up -d
        docker build -t ijm-selenium-tests:latest --build-arg APP_HOSTNAME="http://"$APP_IP":8080/" -f tests/Dockerfile ./tests
    - name: Run Automation suite
      run: |
        CURR_PATH=$(pwd)
        mkdir -p $CURR_PATH/reports && chmod 777 -R $CURR_PATH/reports
        docker run -i --name ijm-selenium -v $CURR_PATH/reports:/app/reports ijm-selenium-tests:latest
    - name: Get test results
      if: always()
      id: test-res
      run: |
        RESULT=$(jq '[ .[].elements[].steps[].result.status ] | unique | tostring | test("failed")' reports/report.json)
        echo "::set-output name=TEST_RESULTS::$RESULT"
        echo "Test results - $RESULT"
    - name: Publish test results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: selenium-test-report
        path: reports/
    - name: Examine test results
      if: ${{ steps.test-res.outputs.TEST_RESULTS == 'true' }}
      run: |
        echo "Test results output - ${{ steps.test-res.outputs.TEST_RESULTS }}"
        echo "Test failed - preventing pipeline from further deployment"
        exit 1
    - name: Update env file
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "IIIF_HOST=${{ secrets.API_URL_PUBLIC }}" > .env
        echo "API_HOST=${{ secrets.API_URL_PUBLIC }}" >> .env
        echo "API_IMAGE=$ECR_REGISTRY/ijm-api:$IMAGE_TAG" >> .env
        echo "JOURNAL_IMAGE=$ECR_REGISTRY/ijm-journal:$IMAGE_TAG" >> .env
        echo "${{ secrets.JKS_STORE }}}" > cacerts_enc
        base64 -d cacerts_enc > cacerts
        rm -rf cacerts_enc
    - name: Push docker images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Test results output - ${{ steps.test-res.outputs.TEST_RESULTS }}"
        docker push $ECR_REGISTRY/ijm-api:$IMAGE_TAG
        docker push $ECR_REGISTRY/ijm-journal:$IMAGE_TAG
    - name: Publish env
      uses: nogsantos/ssh-scp-deploy@v1.2.1
      with:
        src: ./.env
        host: ${{ secrets.SSH_HOST }}
        remote: ${{ secrets.SSH_DIR }}
        port: ${{ secrets.SSH_PORT }}
        user: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_KEY }}
    - name: Publish compose
      uses: nogsantos/ssh-scp-deploy@v1.2.1
      with:
        src: ./docker-compose.prod.yml
        host: ${{ secrets.SSH_HOST }}
        remote: ${{ secrets.SSH_DIR }}
        port: ${{ secrets.SSH_PORT }}
        user: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_KEY }}
    - name: Publish config
      uses: nogsantos/ssh-scp-deploy@v1.2.1
      with:
        src: ./journal/.docker/nginx.conf
        host: ${{ secrets.SSH_HOST }}
        remote: ${{ secrets.SSH_DIR }}
        port: ${{ secrets.SSH_PORT }}
        user: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_KEY }}
    - name: Publish certs store
      uses: nogsantos/ssh-scp-deploy@v1.2.1
      with:
        src: ./cacerts
        host: ${{ secrets.SSH_HOST }}
        remote: ${{ secrets.SSH_DIR }}
        port: ${{ secrets.SSH_PORT }}
        user: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_KEY }}
    - name: Deploy application
      uses: alinz/ssh-scp-action@v0.1.1
      with:
        key: ${{ secrets.SSH_KEY }}
        host: ${{ secrets.SSH_HOST }}
        port: ${{ secrets.SSH_PORT }}
        user: ${{ secrets.SSH_USER }}
        ssh_before: |
          cd ${{ secrets.SSH_DIR }};
          mv docker-compose.prod.yml docker-compose.yml;
          chmod 400 cacerts;
          mkdir -p journal/.docker;
          mv nginx.conf journal/.docker;
          /bin/sh ${{ secrets.SSH_DIR }}/deploy.sh;
    - name: ECR logout
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}
    - name: Slack notify
      if: failure()
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      uses: voxmedia/github-action-slack-notify-build@v1
      with:
        channel: article-hosting-general
        status: FAILED
        color: danger