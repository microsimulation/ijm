{
    "status": "vor",
    "id": "00171",
    "version": 1,
    "type": "short-report",
    "doi": "10.34196/ijm.00171",
    "authorLine": "Richiardi G. Matteo",
    "title": "The code <i>and</i> the model: A response to \u201cThe code is the model\u201d, by Luzius Meisser",
    "published": "2017-12-31T00:00:00Z",
    "versionDate": "2017-12-31T00:00:00Z",
    "statusDate": "2017-12-31T00:00:00Z",
    "volume": 10,
    "issue": 3,
    "elocationId": "n/a",
    "pdf": "http://web:8082/00171/ijm-00171.pdf",
    "subjects": [
        {
            "id": "methodology",
            "name": "Methodology"
        }
    ],
    "copyright": {
        "license": "CC-BY-4.0",
        "holder": "Matteo",
        "statement": "This article is distributed under the terms of the <a href=\"http://creativecommons.org/licenses/by/4.0/\">Creative Commons Attribution License</a>, which permits unrestricted use and redistribution provided that the original author and source are credited."
    },
    "authors": [
        {
            "affiliations": [
                {
                    "address": {
                        "components": {
                            "country": "United Kingdom"
                        },
                        "formatted": [
                            "United Kingdom"
                        ]
                    },
                    "name": [
                        "Institute for New Economic Thinking at the Oxford Martin School"
                    ]
                }
            ],
            "emailAddresses": [
                "matteo.richiardi@spi.ox.ac.uk"
            ],
            "name": {
                "index": "Matteo, Richiardi G.",
                "preferred": "Richiardi G. Matteo"
            },
            "type": "person"
        }
    ],
    "body": [
        {
            "content": [
                {
                    "text": "The main argument of Luzius Meisser\u2019s paper is in the title: \u201cThe code <i>is</i> the model\u201d. This is considered as a self-evident truth, that once understood allows to reap the benefits of agile software development. The paper then continues describing some good practices in programming, and advocates the adoption of new editorial policies for simulation-based studies. The paper deals with an important topic, is well written, and engaging. In particular, I agree with most of the recommendations for increasing the replicability of the results and writing simple and accessible code put forward in the paper (Sections 4 and 5). However, I think the central claim of the paper suffers from some major misconceptions.",
                    "type": "paragraph"
                },
                {
                    "text": "In a sense, what we define as a model is arbitrary. When a boy takes a stick and floats it in the water, the stick can be considered as the model of a boat. However, we can also imagine that the boy has a mental model of a boat \u2014an object that floats, is long and narrow, and possibly does not capsize too often\u2014 and that the stick is the implementation of that mental model. Similarly, when considering an analytical model, we can of course say that the model is the set of equations that characterise it. As an example, consider the 3-body problem in physics, where the aim is to characterise at any instant in time the positions of three particles with different masses, given their initial position and velocity. The problem is fully described by three coupled second-order differential equations, so we could claim that these three equations <i>are</i> the model.",
                    "type": "paragraph"
                },
                {
                    "text": "However, this is often a poor description of the underlying process of abstraction. There is the real world. There is some intuition \u2014in the mind of the modeller\u2014 that some features of the real world can be abstracted from. And then there is the implementation of this intuition. In my understand-ing, a model is made of both the assumptions and the implementation. The implementation part is in many respects the least interesting. The important bit lies in the assumptions, the process of abstraction that leads to the identification of the core elements of a problem, or the Platonic ideals of an object: \u201cConsider that boats are long and narrow objects that float\u201d; \u201cAssume that the mass of three celestial bodies is concentrated in their centre, and that there are no other interfering bodies\u201d. While a narrow definition of a model as implementation alone \u2014as Meisser suggests\u2014 is certainly possible, I do not think it leads to any deeper understanding of the motivations, the practice and the limitations ofany modelling exercise. On the other hand, the layered interpretation of a model as assumptions + implementation allows to go further. For instance, the three-body problem has no analytical solution, and it must be simulated. According to Meisser, the algorithm for the simulation <i>is</i> the model, and forget about the three differential equations. But the three equation are much more \u201ctalkative\u201d than the algorithm for simulating them. They convey more relevant information, in a more concise and clearer way.",
                    "type": "paragraph"
                },
                {
                    "text": "One objection to distinguishing between assumptions and implementation is that the implementation is not assumption-free. This might be true, but it seems to me that there is a clear hierarchy of assumptions, where those relating to the implementation occupying the lowest level. When the results of a model depend on some technical details of the implementation, there is a problem. May be those details are not only of technical relevance, but discriminate between different versions of the model, that is they pertain to the upper tiers of the hierarchy, and should be discussed separately from the implementation. If the results truly depend on some insignificant detail of the implementation, may be the model is not that interesting.",
                    "type": "paragraph"
                },
                {
                    "text": "Could it be that considering the code as the model is appropriate for models without an analytical representation? I have argued elsewhere (<a href=\"#bib1\">Gallegati &amp; Richiardi, 2009</a>; <a href=\"#bib2\">Leombruni &amp; Richiardi, 2005</a>) that simulation models always allow \u2014at least in principle\u2014 an analytical representation, consisting in a set of well-defined functions that iteratively define in an unambiguous way the dynamic of the system. However, it is true that sometimes these functions are too numerous or too complicated so that not only they cannot be solved analytically, but they offer little additional insights with respect to the algorithms used to implement them. May be in such cases we can dispense with one layer: from \u201cassumptions <i>\u2192</i> analytical implementation <i>\u2192</i> computational implementation\u201d to \u201cassumptions <i>\u2192</i> computational implementation\u201d. Still, I find it valuable to think in terms of assumptions + implementation, rather than in terms of implementation alone. The appropriateness of a model is to be judged also with respect to those assumptions. While in principle it is possible to look at the code to find what these assumptions are, this is practically infeasible, and possibly very inefficient. As soon as the model becomes complicated enough, relying on a description at the lowest possible level \u2014the code itself\u2014 is like presenting a black box with lots of wiring inside: while it is still possible for an engineer to open it and see how it works, the broader scientific audience should not be expected to do it. Once the assumptions on which the model rests are spelled out, either verbally or with the use of mathematical language, an additional layer in model specification is introduced, with a corresponding need for validation: program validation, the validation of the code that simulates the model relative to the model itself (<a href=\"#bib3\">Stanislaw, 1986</a>).",
                    "type": "paragraph"
                },
                {
                    "text": "Are there cases where assumptions are not important in defining a model? Meisser brings the example of software, and indeed this is his main analogy. Software is not supposed to <i>represent</i> anything; software is supposed to <i>do</i> something. The distinction matters because if a model is, above all, the formal representation of an idea, it must be adherent enough to the original idea that the researcher wants to convey (model validity, in Stanislaw\u2019s parlance). This is something which is generally very hard to check in the code. On the other hand, if a model needs just to do things \u2014transforms inputs into outputs\u2014 it does not really matter whether the way the model does the things it does is consistent with some a priori idea. The only thing that matters is that users find it useful.",
                    "type": "paragraph"
                },
                {
                    "text": "However, a model is not a software object. A software is typically used many times, for different purposes. I use the scanner app on my phone to scan all sort of documents, and use R whenever I need to manipulate data. While it is true that the same model can be applied, possibly with minor modifications or changes in the interpretation of the variables, to different settings, models are typically used to make a point. Point made, job done: the model can go and rest in the attic. Moreover, the point is often of more general validity than the model, and it possibly holds also when some of the assumptions used to prove it are relaxed. For instance, David Ricardo explained his idea of comparative advantage with the aid of a simple model where England and Portugal traded wine for clothes. Ricardo used a model to make the point that trade can be mutually beneficial also when one country possesses a superior technology in all the goods involved, but his contribution lies in the idea, not in the model. The mechanism of comparative advantage is indeed quite abstract and universal, and arguably always at work whenever an exchange is concerned. Whether it can quantitatively overcome other mechanisms that possibly work in other directions, and make trade less or no beneficial at all for at least one of the subjects involved, depends on the details of the model, and is the subject of an exterminate literature that has originated from Ricardo\u2019s work.",
                    "type": "paragraph"
                },
                {
                    "text": "Meisser builds his plea for agile development on the software analogy. However, my impression is that once the software analogy is debunked, little scope remains for agile development. We can think of three steps in model building: (1) model specification (in the mind of the researcher), (2) model construction (in the lab/computer of the researcher), (3) model description (in the paper). I have doubts that agile programming can help in step (1) \u2014model specification: it is not true that researchers wander around modifying their code until something interesting comes out of it \u2014this would definitely be a bad scientific practice. Agile programming might perhaps render step (2) \u2014model construction\u2014 more flexible and efficient, but I do not see it as impacting step (3) \u2014model description\u2014 in any significant way. Software objects do not need a description: they need a user guide. A software, as long as it is continuously developed, is a dynamic object; a model is a static one. In a paper, model description happens at a stage when the model is already carved. Model description is in many respects akin to the autopsy of a dead body.",
                    "type": "paragraph"
                },
                {
                    "text": "Said differently, the goal of a paper is not to facilitate further extensions and adaptations of the model, but to describe the model in a concise way, amenable to replicability. Using the code itself to describe the model might satisfy the latter requirement (replicability), but definitely does not satisfy the first. Agile programming notwithstanding, it is difficult to go beyond the point beautifully made by Miller and Page, quoted by the author:",
                    "type": "paragraph"
                },
                {
                    "text": [
                        {
                            "text": "The actual computer code itself is a complete specification of the model, but there is a big difference between a complete specification and an accessible one.",
                            "type": "paragraph"
                        }
                    ],
                    "type": "quote"
                },
                {
                    "text": "Of course, saying that the code alone is not enough does not mean that the code is not useful. What matters is that the model is appropriately described irrespective of whether words, formulas, diagrams, pseudo-code or actual code \u2014possibly, a combination of all these\u2014 are used to describe it. Alike the solution to energy generation comes from an appropriate energy mix, the solution to the problem of describing the model can only come in terms of an appropriate mix of techniques, which vary depending on the nature of the model itself. Simulation models definitely require pseudo-code, and possibly the code itself, to be made available to readers.",
                    "type": "paragraph"
                },
                {
                    "text": "However, there is a practical issue with respect of the publication of the code. Code, as the author also notes, can be very long, and it normally does not fit a paper. The author suggests to circumvent this problem by referring to some publicly available repository, like GitHub. As an editor of a scientific journal, I welcome submission of the code, which I pass on to the referees, and even more I welcome when the code is made available on a public repository, so that both referees and readers can analyse and use it. But as an editor of a scientific journal I cannot take responsibility for material published elsewhere. The model must be described in the paper published by the journal, in a way that is possibly amenable to replication, at least qualitatively. The paper cannot contain only a very high level description of the model, as Meisser suggests, while referring to GitHub for all the details. What if GitHub is hacked and all the uploaded material lost? But I take the point, and I think that asking scientific journals to publish the code of the model \u2014or at a minimum an executable\u2014 as an appendix to the paper, together with some code which recalls the model under suitable parameterisations and produces the published results, would be fair. The IJM is prepared to adopt such a publication policy (see the Editorial to the current issue of the journal).",
                    "type": "paragraph"
                },
                {
                    "text": "To summarise, I think of models as comprised of assumptions and implementation. Agile software development might increase programming efficiency and help with the implementation \u2014although my impression is that the benefits can be fully reaped only by professional programmers. However, the code alone is in general not a good way to describe neither the assumptions, nor the implementation.",
                    "type": "paragraph"
                }
            ],
            "id": "s0",
            "title": "Main text",
            "type": "section"
        }
    ],
    "references": [
        {
            "authors": [
                {
                    "name": {
                        "index": "Gallegati, M",
                        "preferred": "M Gallegati"
                    },
                    "type": "person"
                },
                {
                    "name": {
                        "index": "Richiardi, M",
                        "preferred": "M Richiardi"
                    },
                    "type": "person"
                }
            ],
            "date": "2009",
            "details": "Ed, Encyclopedia of complexity and system science, New York, Springer",
            "id": "bib1",
            "title": "Encyclopedia of complexity and system science",
            "type": "unknown"
        },
        {
            "articleTitle": "Why are economists sceptical about agent-based simulations?",
            "authors": [
                {
                    "name": {
                        "index": "Leombruni, R",
                        "preferred": "R Leombruni"
                    },
                    "type": "person"
                },
                {
                    "name": {
                        "index": "Richiardi, M",
                        "preferred": "M Richiardi"
                    },
                    "type": "person"
                }
            ],
            "date": "2005",
            "id": "bib2",
            "journal": "Physica A",
            "pages": {
                "first": "103",
                "last": "109",
                "range": "103\u2013109"
            },
            "type": "journal",
            "volume": "355"
        },
        {
            "articleTitle": "Tests of computer simulation validity. what do they measure?",
            "authors": [
                {
                    "name": {
                        "index": "Stanislaw, H",
                        "preferred": "H Stanislaw"
                    },
                    "type": "person"
                }
            ],
            "date": "1986",
            "id": "bib3",
            "journal": "Simulation and Games",
            "pages": {
                "first": "173",
                "last": "191",
                "range": "173\u2013191"
            },
            "type": "journal",
            "volume": "17"
        }
    ],
    "-meta": {
        "patched": true
    },
    "stage": "published"
}
